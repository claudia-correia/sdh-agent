package agent

import (
	"fmt"
	"strings"
	"time"

	"sdh-agent/internal/github"
	"sdh-agent/internal/prompts"
)

// generateReport creates the final report
func (agent *SDHAgent) generateReport(mainIssue *github.GitHubIssueContent, summary string, analysisResults []AnalyzisResult) (string, error) {
	var messages []string

	// Create a prompt for report generation
	prompt := prompts.CreateReportGenerationPrompt(mainIssue.IssueNumber)
	messages = append(messages, prompt)

	// Add main issue summary
	mainSummaryMsg := formatMainSummary(summary, len(analysisResults))
	messages = append(messages, mainSummaryMsg)

	// Prepare analysis data
	analysisMessages := formatAnalyzisResults(analysisResults)
	messages = append(messages, analysisMessages...)

	report, err := agent.llmClient.GenerateText(messages)
	if err != nil {
		return "", err
	}

	// Add header and footer
	finalReport := formatReportWrapper(mainIssue.IssueNumber, time.Now().Format("2006-01-02 15:04:05 UTC"), report)

	return finalReport, nil
}

// formatMainSummary creates a formatted string containing the main issue summary
// and information about the number of similar issues
func formatMainSummary(summary string, analysisResultsCount int) string {
	var summaryBuilder strings.Builder

	summaryBuilder.WriteString(fmt.Sprintf("Summary of current SDH issue:\n %s\n\n", summary))

	if analysisResultsCount > 0 {
		summaryBuilder.WriteString(fmt.Sprintf("I'll now provide analysis of %d similar issues. Each similar issue will be in a separate message.", analysisResultsCount))
	} else {
		summaryBuilder.WriteString("No similar issues found for analysis.")
	}

	return summaryBuilder.String()
}

func formatAnalyzisResults(analysisResults []AnalyzisResult) []string {
	var messages []string

	// Prepare analysis data
	for i, result := range analysisResults {
		var analyzisBuilder strings.Builder

		// Add analysis data for each similar issue
		analyzisBuilder.WriteString(fmt.Sprintf("Issue #%d:\n%s\n", result.IssueContent.IssueNumber, result.Resolution))

		// Add context about where this comment fits in the sequence
		if i < len(analysisResults)-1 {
			analyzisBuilder.WriteString(fmt.Sprintf("\n\n---\n\nNote: This is similar issue %d of %d. More similar issues follow in subsequent messages.", i+1, len(analysisResults)))
		} else {
			analyzisBuilder.WriteString(fmt.Sprintf("\n\n---\n\nNote: This is the final similar issue (%d of %d).", i+1, len(analysisResults)))
		}

		// Append to messages
		messages = append(messages, analyzisBuilder.String())
	}

	return messages
}

// FormatReportWrapper adds header and footer to the generated report
func formatReportWrapper(issueNumber int, timestamp, reportContent string) string {
	return fmt.Sprintf(`## AI Agent Analysis Report for SDH Issue #%d

*Generated on %s*

%s

---
*This report was automatically generated by the SDH AI Agent based on analysis of similar issues.*`,
		issueNumber,
		timestamp,
		reportContent)
}
